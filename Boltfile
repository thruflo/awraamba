#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" `Bolt <http://pypi.python.org/pypi/bolt>`_ script to automate deployment.
"""

import re
from pkg_resources import require
from commands import getoutput

from os.path import dirname, exists, join as join_path
here = dirname(__file__)

src_folder = join_path(here, 'src', 'awraamba')
i18n_folder = join_path(here, 'build', 'i18n')

from bolt.api import *

languages = ['en']

@task
def compile():
    """ Update and compile .po files into .mo files."""
    
    require('babel')
    
    d = '--directory %s' % i18n_folder
    local('pybabel compile --domain=awraamba %s --use-fuzzy' % d)
    


@task
def extract():
    """ Extract message files.
    """
    
    require('babel')
    
    pot_file = join_path(i18n_folder, 'messages.pot')
    config_file = join_path(here, 'etc', 'babel.cfg')
    local('pybabel extract -F %s -o %s .' % (config_file, pot_file))
    
    infile = '--input-file=%s' % pot_file
    outdir = '--output-dir=%s' % i18n_folder
    for item in languages:
        path = join_path(i18n_folder, item, 'LC_MESSAGES', 'awraamba.po')
        if not exists(path):
            loc = '--locale=%s' % item
            local('pybabel init --domain=awraamba %s %s %s' % (infile, outdir, loc))
        local('pybabel update --domain=awraamba %s %s' % (infile, outdir))
    
    import babel.messages.extract
    import json 
    
    asset_file = join_path(here, 'build', 'static', 'assets.json')
    strings_file = join_path(i18n_folder, 'message_strings.json')
    
    sock = open(asset_file)
    data = json.loads(sock.read())
    sock.close()
    
    js_file = join_path(here, 'build', 'static', data.get('js/client.js'))
    items = babel.messages.extract.extract_from_file('javascript', js_file)
    messages = [item[1] for item in items]
    
    sock = open(strings_file, 'w')
    sock.write(json.dumps(messages))
    sock.close()
    


@task
def build():
    """ Kill any running assetgen processes and build the production static files.
    """
    
    require('assetgen')
    
    # Kill any assetgen processes.
    ps_id = re.compile(r'^\S+\s+([0-9]+)', re.M)
    ps_ids = ps_id.findall(getoutput('ps -aux | grep [a]ssetgen'))
    if len(ps_ids):
        local('kill %s' % ' '.join(ps_ids))
    
    # Run assetgen.
    assetgen_file = join_path(here, 'etc', 'assetgen.yaml')
    local('assetgen %s --force' % assetgen_file)
    


@task
def update():
    raise NotImplemented
    


@task
def deploy():
    raise NotImplemented
    

